name: deploy-destroy

on:
  workflow_dispatch:

jobs:
  #region Deploy
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1

      #region __JEST
      - name: Pasar pruebas unitarias de JEST
        working-directory: ./client/
        run: |
          npm install 
          npm run test -- --watchAll=false

      - name: Verificar resultado de los tests
        if: success()
        run: echo "✅ Los tests pasaron correctamente."

      - name: Verificar fallos en los tests
        if: failure()
        run: echo "❌ Algunos tests fallaron."

      #region __Pasar Tokens
      - name: pasar mis tokens a aws
        if: success()
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"

      #region __Set Up Terraform
      - name: Hacer el set up de tf
        if: success()
        uses: hashicorp/setup-terraform@v3

      - name: inicializar terraform
        if: success()
        working-directory: ./deploy
        run: terraform init

      - name: plan de terraform
        if: success()
        working-directory: ./deploy
        run: terraform plan -no-color

      - name: apply terraform
        if: success()
        working-directory: ./deploy
        run: terraform apply -auto-approve

      #region __Obtener IP
      - name: Obtener IP y DNS público
        if: success()
        working-directory: ./deploy
        id: get-instance-info
        run: |
          echo "public_ip=$(terraform output -raw ec2_instance_public_ip)" >> $GITHUB_OUTPUT
          echo "public_dns=$(terraform output -raw ec2_instance_public_dns)" >> $GITHUB_OUTPUT

      - name: Mostrar información de la instancia
        if: success()
        run: |
          echo "La IP pública de la instancia EC2 es: ${{ steps.get-instance-info.outputs.public_ip }}"
          echo "El DNS público de la instancia EC2 es: ${{ steps.get-instance-info.outputs.public_dns }}"

        #region __Update Env.js
      - name: Actualizar env.js con la nueva IP
        if: success()
        run: |
          cd client/config
          if [ -f env.js ]; then
            # Reemplazar solo lo que está entre // y :
            sed -i -E "s|//[^:]+:|//${{ steps.get-instance-info.outputs.public_ip }}:|g" env.js
            echo "Contenido actualizado de env.js:"
            cat env.js
          else
            echo "Error: env.js no encontrado en client/config/"
            exit 1
          fi

      #region __Update Repository
      - name: Commit y push de los cambios
        if: success()
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git pull
          git add client/config/env.js
          git commit -m "Update API endpoints with new EC2 IP: ${{ steps.get-instance-info.outputs.public_ip }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #region __Upload Tfstate
      - name: Subir tfstate como artefacto
        if: success()
        uses: actions/upload-artifact@v4.4.3
        with:
          name: terraform-tfstate
          path: ./deploy/terraform.tfstate

      #region __Transfer Certificates
      - name: Crear archivos temporales de certificados
        if: success()
        run: |
          echo "${{ secrets.CA_BUNDLE }}" > /tmp/ca_bundle
          echo "${{ secrets.CERTIFICATE }}" > /tmp/certificate
          echo "${{ secrets.PRIVATE_KEY }}" > /tmp/private_key
          echo "${{ secrets.CLAVE_PEM }}" > /tmp/key.pem
          chmod 600 /tmp/key.pem

      - name: Transferir certificados a EC2
        if: success()
        run: |
          # Esperar un momento para asegurarse que la instancia esté lista
          sleep 30
          # Transferir cada archivo usando el DNS público de EC2
          scp -o StrictHostKeyChecking=no -i /tmp/key.pem /tmp/ca_bundle admin@${{ steps.get-instance-info.outputs.public_dns }}:/tmp/
          scp -o StrictHostKeyChecking=no -i /tmp/key.pem /tmp/certificate admin@${{ steps.get-instance-info.outputs.public_dns }}:/tmp/
          scp -o StrictHostKeyChecking=no -i /tmp/key.pem /tmp/private_key admin@${{ steps.get-instance-info.outputs.public_dns }}:/tmp/
          
      - name: Limpiar archivos temporales
        if: always()
        run: |
          rm -f /tmp/ca_bundle /tmp/certificate /tmp/private_key /tmp/key.pem

  #region Destroy
  destroy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1

      #region __Donwload Tfstate
      - name: Descargar tfstate como artefacto
        uses: actions/download-artifact@v4.1.8
        with:
          name: terraform-tfstate
          path: ./deploy/

      #region __Pasar tokens
      - name: pasar mis tokens a aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"

      #region __Set Up Terraform
      - name: Hacer el set up de tf
        uses: hashicorp/setup-terraform@v3

      - name: inicializar terraform
        working-directory: ./deploy
        run: terraform init

      - name: destroy terraform
        working-directory: ./deploy
        run: terraform destroy -auto-approve