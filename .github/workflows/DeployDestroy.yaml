name: deploy-destroy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1

      - name: pasar mis tokens a aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"

      - name: Hacer el set up de tf
        uses: hashicorp/setup-terraform@v3

      - name: inicializar terraform
        working-directory: ./deploy
        run: terraform init

      - name: plan de terraform
        working-directory: ./deploy
        run: terraform plan -no-color

      - name: apply terraform
        working-directory: ./deploy
        run: terraform apply -auto-approve

      - name: Obtener IP pública
        working-directory: ./deploy
        id: get-ip
        run: |
          echo "public_ip=$(terraform output -raw ec2_instance_public_ip)" >> $GITHUB_OUTPUT

      - name: Mostrar IP pública
        run: |
          echo "La IP pública de la instancia EC2 es: ${{ steps.get-ip.outputs.public_ip }}"

      - name: Actualizar env.js con la nueva IP
        run: |
          cd client/config
          if [ -f env.js ]; then
            # Reemplazar solo lo que está entre // y :
            sed -i -E "s|//[^:]+:|//${{ steps.get-ip.outputs.public_ip }}:|g" env.js
            echo "Contenido actualizado de env.js:"
            cat env.js
          else
            echo "Error: env.js no encontrado en client/config/"
            exit 1
          fi

      - name: Commit y push de los cambios
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add client/config/env.js
          git commit -m "Update API endpoints with new EC2 IP: ${{ steps.get-ip.outputs.public_ip }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Subir tfstate como artefacto
        uses: actions/upload-artifact@v4.4.3
        with:
          name: terraform-tfstate
          path: ./deploy/terraform.tfstate

  destroy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1

      - name: Descargar tfstate como artefacto
        uses: actions/download-artifact@v4.1.8
        with:
          name: terraform-tfstate
          path: ./deploy/

      - name: pasar mis tokens a aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"

      - name: Hacer el set up de tf
        uses: hashicorp/setup-terraform@v3

      - name: inicializar terraform
        working-directory: ./deploy
        run: terraform init

      - name: destroy terraform
        working-directory: ./deploy
        run: terraform destroy -auto-approve
